<?php

namespace TunaCMS\Bundle\CategoryBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Knp\DoctrineBehaviors\Model as ORMBehaviors;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use TunaCMS\CommonComponent\Traits\TranslatableAccessorTrait;

/**
 * Category
 *
 * @ORM\Entity
 * @ORM\Table(name="categories")
 * @ORM\InheritanceType("SINGLE_TABLE")
 * @ORM\DiscriminatorColumn(name="type", type="string")
 * @UniqueEntity("name")
 *
 * @method Category setName(string $name)
 * @method string getName()
 */
class Category
{
    use ORMBehaviors\Translatable\Translatable;
    use ORMBehaviors\Sluggable\Sluggable;
    use TranslatableAccessorTrait;

    /**
     * @ORM\Id
     * @ORM\Column(name="id", type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * Category constructor.
     *
     * @param null|string $name
     */
    public function __construct($name = null)
    {
        if ($name !== null) {
            $this->setName($name);
        }
    }

    /**
     * @return string
     */
    public function __toString()
    {
        return $this->getName() ? $this->getName() : '';
    }

    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Get type of Category: cuts the 'Category' suffix of a class,
     * so 'NewsCategory' becomes: 'News'. override this if autogenerated
     * type doesn't fit your requirements.
     *
     * @return string
     */
    public function getType()
    {
        return strtr((new \ReflectionClass($this))->getShortName(), ['Category' => '']);
    }

    /**
     * {@inheritdoc}
     */
    public function getSluggableFields()
    {
        return ['name'];
    }
}
